<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>薛定谔的肥宅</title>
    <link>https://mythou.com/</link>
    <description>Recent content on 薛定谔的肥宅</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 07 Apr 2021 14:24:00 +0000</lastBuildDate><atom:link href="https://mythou.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PHP的strtotime方法中的陷阱</title>
      <link>https://mythou.com/posts/2021-04-08-php-json-trick/</link>
      <pubDate>Wed, 07 Apr 2021 14:24:00 +0000</pubDate>
      
      <guid>https://mythou.com/posts/2021-04-08-php-json-trick/</guid>
      <description>strtotime 在PHP中是一个超级函数，可以处理多种格式的时间字符串。 比如我们要获得本月的第一天和最后一天
date(&amp;#39;Y-m-d&amp;#39;,strtotime(&amp;#39;first day of this month&amp;#39;)); // 第一天 date(&amp;#39;Y-m-d&amp;#39;,strtotime(&amp;#39;last day of this month&amp;#39;)); // 最后一天 但是在提供便利性的同时这个方法也有一些坑，比如： 比如我们想根据某个日期获取上个月的月份信息，就有可能这样用：
date(&amp;#39;Y-m&amp;#39;,strtotime(&amp;#39;2021-03-31 -1 month&amp;#39;)); //2021-03 date(&amp;#39;Y-m&amp;#39;,strtotime(&amp;#39;2021-03-31 -2 month&amp;#39;)); //2021-01 你可能会觉得有点出乎意料，第一行为什么不是二月份，第二行怎么感觉又对了，我们把日期显示出来看下
date(&amp;#39;Y-m-d&amp;#39;,strtotime(&amp;#39;2021-03-31 -1 month&amp;#39;)); //2021-03-03 date(&amp;#39;Y-m-d&amp;#39;,strtotime(&amp;#39;2021-03-31 -2 month&amp;#39;)); //2021-01-31 可以看到2021-03-31减去一个月并没有去到二月份，而是在03-03，如果对数字敏感可以发现，这是31减去了28， 28是2021-02月份的天数，所以strtotime 操作中的 -x month的操作是按照前面月份的天数来操作的， 而-2 month 的操作是减去上个月的天数，然后再减去上上个月的天数：
date(&#39;Y-m-d&#39;,strtotime(&#39;2021-03-31 -1 month&#39;))是到2021-03-03,
而date(&#39;Y-m-d&#39;,strtotime(&#39;2021-03-31 -2 month&#39;)); 等于2021-03-03再减去 一月份的31天得到2021-01-31 //(2021-03-03 -31天 = 2021-03-31)
我们再看看+x month 的操作
date(&amp;#39;Y-m-d&amp;#39;,strtotime(&amp;#39;2021-01-10 +2 month&amp;#39;)) 2021-03-10 echo date(&amp;#39;Y-m-d&amp;#39;,strtotime(&amp;#39;2021-04-01 +1 month&amp;#39;)); 2021-05-01 echo date(&amp;#39;Y-m-d&amp;#39;,strtotime(&amp;#39;2021-02-10 +1 month&amp;#39;)); 2021-03-10 echo date(&amp;#39;Y-m-d&amp;#39;,strtotime(&amp;#39;2021-01-10 +1 month&amp;#39;)); 2021-02-10 完美的获得的后面一个月/两个月的对应的日期，换个方式思考你可以把它看成加上本月的天数。+2 month就是加上本月的天数，再加上下一月的天数</description>
    </item>
    
    <item>
      <title>PHP的strtotime方法中的陷阱</title>
      <link>https://mythou.com/posts/2021-04-08-php-strtotime-trick/</link>
      <pubDate>Wed, 07 Apr 2021 14:24:00 +0000</pubDate>
      
      <guid>https://mythou.com/posts/2021-04-08-php-strtotime-trick/</guid>
      <description>strtotime 在PHP中是一个超级函数，可以处理多种格式的时间字符串。 比如我们要获得本月的第一天和最后一天
date(&amp;#39;Y-m-d&amp;#39;,strtotime(&amp;#39;first day of this month&amp;#39;)); // 第一天 date(&amp;#39;Y-m-d&amp;#39;,strtotime(&amp;#39;last day of this month&amp;#39;)); // 最后一天 但是在提供便利性的同时这个方法也有一些坑，比如： 比如我们想根据某个日期获取上个月的月份信息，就有可能这样用：
date(&amp;#39;Y-m&amp;#39;,strtotime(&amp;#39;2021-03-31 -1 month&amp;#39;)); //2021-03 date(&amp;#39;Y-m&amp;#39;,strtotime(&amp;#39;2021-03-31 -2 month&amp;#39;)); //2021-01 你可能会觉得有点出乎意料，第一行为什么不是二月份，第二行怎么感觉又对了，我们把日期显示出来看下
date(&amp;#39;Y-m-d&amp;#39;,strtotime(&amp;#39;2021-03-31 -1 month&amp;#39;)); //2021-03-03 date(&amp;#39;Y-m-d&amp;#39;,strtotime(&amp;#39;2021-03-31 -2 month&amp;#39;)); //2021-01-31 可以看到2021-03-31减去一个月并没有去到二月份，而是在03-03，如果对数字敏感可以发现，这是31减去了28， 28是2021-02月份的天数，所以strtotime 操作中的 -x month的操作是按照前面月份的天数来操作的， 而-2 month 的操作是减去上个月的天数，然后再减去上上个月的天数：
date(&#39;Y-m-d&#39;,strtotime(&#39;2021-03-31 -1 month&#39;))是到2021-03-03,
而date(&#39;Y-m-d&#39;,strtotime(&#39;2021-03-31 -2 month&#39;)); 等于2021-03-03再减去 一月份的31天得到2021-01-31 //(2021-03-03 -31天 = 2021-03-31)
我们再看看+x month 的操作
date(&amp;#39;Y-m-d&amp;#39;,strtotime(&amp;#39;2021-01-10 +2 month&amp;#39;)) 2021-03-10 echo date(&amp;#39;Y-m-d&amp;#39;,strtotime(&amp;#39;2021-04-01 +1 month&amp;#39;)); 2021-05-01 echo date(&amp;#39;Y-m-d&amp;#39;,strtotime(&amp;#39;2021-02-10 +1 month&amp;#39;)); 2021-03-10 echo date(&amp;#39;Y-m-d&amp;#39;,strtotime(&amp;#39;2021-01-10 +1 month&amp;#39;)); 2021-02-10 完美的获得的后面一个月/两个月的对应的日期，换个方式思考你可以把它看成加上本月的天数。+2 month就是加上本月的天数，再加上下一月的天数</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://mythou.com/about/</link>
      <pubDate>Wed, 04 Nov 2020 21:44:10 +0800</pubDate>
      
      <guid>https://mythou.com/about/</guid>
      <description>个人笔记，费曼学习法</description>
    </item>
    
    <item>
      <title>Vue核心组件Vuex</title>
      <link>https://mythou.com/posts/2019-12-16-vue-vuex/</link>
      <pubDate>Mon, 16 Dec 2019 14:24:00 +0000</pubDate>
      
      <guid>https://mythou.com/posts/2019-12-16-vue-vuex/</guid>
      <description>Vuex是类似redux 的一个概念，是一个专为 Vue.js 应用程序开发的状态管理模式. Vuex的核心概念包含 State,Getters,Mutations,Actions,Modules
State 保存一个单一的状态树
Getters 类似OOP中的魔法getter方法，可以访问一些State中没有的key ,或者覆盖一些Key的获取的方式； Getter 接受 state 作为其第一个参数
const store = new Vuex.Store({ state: { todos: [ { id: 1, text: &amp;#39;...&amp;#39;, done: true }, { id: 2, text: &amp;#39;...&amp;#39;, done: false } ] }, getters: { doneTodos: state =&amp;gt; { return state.todos.filter(todo =&amp;gt; todo.done) }, getTodoById: (state) =&amp;gt; (id) =&amp;gt; { return state.todos.find(todo =&amp;gt; todo.id === id) } } }) //访问方式 却和传统OOP不一样，必须显式声明getter store.</description>
    </item>
    
    <item>
      <title>基于事件的并发</title>
      <link>https://mythou.com/posts/2019-08-02-event-based-concurrency/</link>
      <pubDate>Fri, 02 Aug 2019 14:24:00 +0000</pubDate>
      
      <guid>https://mythou.com/posts/2019-08-02-event-based-concurrency/</guid>
      <description>基础 之前一直用thread 来写并发的程序，但是在一些其他类型的并发程序也是用基于事件的方式，比如GUI程序以及http server 类的程序。
基于事件的并发主要解决两个问题：
 anaging concurrency correctly in multi-threaded applications can be challenging in a multi-threaded application, the developer has little or no control over what is schedule at a given moment in time  Event-based Concurrency 的简单定义：
 you simply wait for something (i.e., an “event”) to occur; when it does, you check what type of event it is and do the small amount of work it requires (which may include issuing I/O requests, or scheduling other events for future handling, etc.</description>
    </item>
    
    <item>
      <title>Semaphores 信号量</title>
      <link>https://mythou.com/posts/2019-07-26-threads-semaphore/</link>
      <pubDate>Fri, 26 Jul 2019 18:24:00 +0000</pubDate>
      
      <guid>https://mythou.com/posts/2019-07-26-threads-semaphore/</guid>
      <description>Dijkstra 和他的同事研究完 lock 和 condition variable 发明了信号量 semaphore。 哪哪都能看到大佬的名字。
信号量能以单个机制解决所有相关的多线程同步问题，可以把信号量当作locks 和 condition variable 使用。
 信号量的定义: A semaphore is an object with an integer value that we can manipulate
with two routines; in the POSIX standard, these routines are sem wait()
and sem post()
 #include &amp;lt;semaphore.hsem_t s; sem_init(&amp;amp;s, 0, 1); //第二个参数 0 表示只在单个进程的线程间共享信号量 1 多个进程中间的线程共享信号量 //第三个参数 1 信号量的int value 初始值 semaphore信号量的用法 用之前先确认三点：
 sem_wait() 如果信号量的值&amp;gt;0 先执行-1操作然后立刻return ; 如果信号量的值&amp;lt;=0 就阻塞调用它的线程 sem_post() 不像wait 操作那样需要特定的条件.</description>
    </item>
    
    <item>
      <title>常见的并发问题</title>
      <link>https://mythou.com/posts/2019-07-26-common-concurrency-bugs/</link>
      <pubDate>Fri, 26 Jul 2019 18:24:00 +0000</pubDate>
      
      <guid>https://mythou.com/posts/2019-07-26-common-concurrency-bugs/</guid>
      <description>有研究者通过研究Mysql,Mozilla,Apache,OpenOffice中的关于并发的问题发现，非死锁问题大概是死锁问题数量的两倍
####非死锁问题 只列举一些常见的问题
1. Atomicity Violation 违反原子性 Thread 1:: if (thd-&amp;gt;proc_info) { fputs(thd-&amp;gt;proc_info, ...); } Thread 2:: thd-&amp;gt;proc_info = NULL; 比如当线程1检查完proc_info 的值之后打算往里面写操作的时候，系统中断了线程1，线程2操作proc_info被置NULL;这个过程就违法了原子性操作。
解决方法就是加个pthread_mutex_t锁
2. Order-Violation Bugs 顺序冲突 Thread 1:: void init() { mThread = PR_CreateThread(mMain, ...); } 6 Thread 2:: void mMain(...) { mState = mThread-&amp;gt;State; } 这个就更好理解了，thread2 以为 thread1 已经创建好了线程mThread ，但是有可能没创建好，所以需要condition variable 约束一下
死锁问题 死锁发生的主要原因：
 Mutual exclusion 很难不用mutual exclusion, 或许可以在硬件上找到替代方案 Hold-and-wait fix : 让某个线程一次性获得所有锁 No preemption
fix:设计优先级 Circular wait</description>
    </item>
    
    <item>
      <title>Condition Variable 条件变量</title>
      <link>https://mythou.com/posts/2019-07-26-condition-variable/</link>
      <pubDate>Fri, 26 Jul 2019 14:24:00 +0000</pubDate>
      
      <guid>https://mythou.com/posts/2019-07-26-condition-variable/</guid>
      <description>Condition Variables 的主要概念 A condition variable is an explicit queue that threads can put themselves on when some state of execution is not as desired; some other thread, when it changes said state, can then wake one (or more) of those waiting threads and thus allow them to continue (by signaling on the condition). Condition Variable 的两个主要操作
 pthread_cond_wait() 这个操作会自动释放mutex锁，如果cv条件不满足就block自己 pthread_cond_signal() 唤醒等待某个cv的线程  Condition Variables的应用 场景一：Parent Waiting For Child 父线程等待子线程 最容一想到的办法使用一个共享变量shard variable</description>
    </item>
    
    <item>
      <title>Locks锁</title>
      <link>https://mythou.com/posts/2019-07-11-locks/</link>
      <pubDate>Thu, 11 Jul 2019 14:24:00 +0000</pubDate>
      
      <guid>https://mythou.com/posts/2019-07-11-locks/</guid>
      <description>Locks provide some minimal amount of control over scheduling to programmers.
 线程是程序员创建的，但是由OS安排执行的，怎么执行是OS说了算的，所以这回导致一些超出程序员预想的混乱。 而lock可以帮助程序员减少这些混乱 ，让程序稍微有一点可控制性。线程用的锁的名字是mutex, 它在线程之间提供了一种互斥锁
如果自己创建一个锁 创建一个锁可以很好理解锁是如何工作的。要想组建一个锁（需要OS和硬件支持），1.要想明白这个锁是干什么的（例子用互斥锁 mutual exclusion）,2.正确,，3.是公平，4.是性能
先设定一个最简单的锁的情况：
假设CPU是单核的，一个进程在执行关键代码的时候不会被中断，就好像是获得了锁一样。
好处就是非常简单，坏处就比较多：
 有的线程霸占CPU不释放锁 在多核CPU没用 关闭中断，中断就丢失了，比如硬盘完成了一个读操作，CPU就不知道去唤醒等待读操作的线程 没效率  为了在多核情况下有用，改进一下我们的锁，用一个全局的标志flag ，多核都能访问
我们可以看到lock 函数里面有个test-and-set 操作，这个操作实际上是CPU自带的一个指令。
这个锁有两个问题：一个是正确性 另一个是性能问题
当两个线程同时看到flag=0的时候他们就同时把flag设置成1 以为自己获得了锁，性能问题和之前一样，一个线程获得锁，其他线程就干等，占着CPU资源干等
要解决正确性问题我们就求助硬件了，就要用到CPU的另一个指令就是xchg (x86), 它是一个原子性的test-and-set 操作，不允许两个线程同时执行，用C语言描述一下这个操作
我们记住CPU里面它就是原子性操作，我们的锁就变成了下面的样子
我们评估一下现在的锁，实现了目的互斥锁以及要求的正确，但是还是没解决公平和性能
没有获得锁的线程一直处于test-and-set 操作循环中，所以这种锁也叫spin lock 自旋锁。既然满足了正确性，但是总是要个先后嘛，这个锁要想在单核CPU上正确工作需要抢先调度策略preemptive scheduler
CPU还有一个指令是compare-and-swap
用这个指令来实现锁其实和test-and-set 差别不大
其他的指令还有fetch-and-add 以及 load-linked and store-conditional
都能用到上面自旋锁的实现上，但没本质改变
硬件解决了一部分问题 ，但是没全部解决，我出门从OS层面寻求帮助
我们假设OS有个yield()操作，线程自己放弃CPU，资源让给别的线程；线程有三个状态running, ready, blocked。
yield 操作把线程从running 状态变成来了ready状态，当一个线程想要获得锁的时候发现锁已经被别人获取了，它就可以yield ，虽然也是在等待，但不是在CPU里干等，而是把CPU资源让出来。
这就解决了性能问题（其实还是有一点开销：比如100个线程1个获得锁其他99个都要执行一遍test-and-set来进行线程状态的转换。总体是赚了，哈哈哈）
剩下的就是公平问题了，如果有多个线程是ready 状态等,到时候先唤醒谁？从现实中找解决问题，那就是排队了就是术语中的队列Queue。好比某个饭馆火爆，已经没位置了，大家在外面排队，里面吃完一桌，外面队前面的进去一桌人。</description>
    </item>
    
    <item>
      <title>线程概述</title>
      <link>https://mythou.com/posts/2019-07-06-thread/</link>
      <pubDate>Sat, 06 Jul 2019 11:24:00 +0000</pubDate>
      
      <guid>https://mythou.com/posts/2019-07-06-thread/</guid>
      <description>为什么使用线程  并行parallelism的需要 避免程序因为低速的IO操作阻塞 尽管可以用多进程解决一些问题，但是线程可以共享一个内存地址空间，当需要贡献数据的时候线程的选择更自然  线程的问题  共享数据比较难操作 不可控制的执行计划 线程等待其他线程  线程Thread API 1.Thread Creation #include &amp;lt;pthread.h&amp;gt; int pthread_create( pthread_t * thread, const pthread_attr_t * attr, void * (*start_routine)(void*), void * arg); 第一个参数 thread 是结构类型pthread_t 的指针，我们用它来和thread交互，所以需要把它传给pthread_create()来初始化它
第二个参数是是设置线程的属性
第三个线程要执行的function
第四个是第三个参数function的参数
代码
#include &amp;lt;pthread.h&amp;gt; 2typedef struct __myarg_t { int a; int b; } myarg_t; void *mythread(void *arg) { myarg_t *m = (myarg_t *) arg; printf(&amp;#34;%d %d\n&amp;#34;, m-&amp;gt;a, m-&amp;gt;b); return NULL; } int main(int argc, char *argv[]) { pthread_t p; int rc; myarg_t args; args.</description>
    </item>
    
    <item>
      <title>Docker几个概念的类比</title>
      <link>https://mythou.com/posts/2019-07-02-docker-concept-analogy/</link>
      <pubDate>Tue, 02 Jul 2019 17:37:00 +0000</pubDate>
      
      <guid>https://mythou.com/posts/2019-07-02-docker-concept-analogy/</guid>
      <description>Docker的官方网站上列出了Docker的几个核心概念：image, container,service,stack,swarm
为了便于理解将这几个概念和程序员熟悉的编程日常做一个类比：
 image 就是类似于代码中的类class 它声明了这个class应有的属性和功能 container 就是class的实例化instance 或者叫 对象object service 就像是class的调用，怎么初始化，以及生成几个实例 stack 就像一个app,它实际就是一组service swarm 就是可以为app提供分布式部署的工具,可以把app部署到多个服务器上  这样类比不是很精确，只是为了建立一个直观的docker概念印象</description>
    </item>
    
    <item>
      <title>JWT概述</title>
      <link>https://mythou.com/posts/2019-07-01-jwt/</link>
      <pubDate>Mon, 01 Jul 2019 11:24:00 +0000</pubDate>
      
      <guid>https://mythou.com/posts/2019-07-01-jwt/</guid>
      <description>JWT是什么 现在BS/CS常见的用户认证方式中比较常见的是cookie&amp;amp;session 以及 token ,jwt就是token 的一种，一般token 使用的方式就是在请求的url 加上token 字符串或者放到http header 里面，jwt 也是这样 标准文档
jwt 呈现出的方式是一个紧凑且url safe的字符串，和一般token一样，jwt也有一套生成的规则。 jwt 的token 看起来是这样样子的 (JWS形式 ，jwt 还有另一种形式JWE)
 xxxx.yyyy.zzzz Header.Payload.Signature
三部分都通过base64 safe url encode 处理
 图片来源于 https://jwt.io/ 截图 这个截图Web界面里面的原json 字符有格式化的显示，实际base64urlencode 的时候字符串里有什么都会被encode 包括换行空格，空格换行不影响json 的encode 和 decode ，这个实际上和jwt已经没关系了
关于header 和 playload 字段中的意义和signature的方式都可以看标准文档，至于jwt想怎么使用 和其他token没什么差别，放到url或者http header（既然是个字符串也可以放到cookie里 ,但是jwt就是为了解决cookie不能跨域的问题的，这样做又兜回去了）都可以，工程上的决定看开发者</description>
    </item>
    
    <item>
      <title>Redux和React的关系</title>
      <link>https://mythou.com/posts/2019-06-24-redux-and-react/</link>
      <pubDate>Mon, 24 Jun 2019 22:55:00 +0800</pubDate>
      
      <guid>https://mythou.com/posts/2019-06-24-redux-and-react/</guid>
      <description>Redux是什么  Redux is a predictable state container for JavaScript apps. 官方说法
  Redux 是一个可预测的JS APP的状态容器，独立于React 以及其他框架或者库。 Redux 是一个唯一的状态仓库，也就是在一个APP里面只能有一个 仓库里面的状态值只读 修改状态值只能通过Action来修改，由Action来告诉Redux 修改哪一个值以及怎么修改， 这个Action实际经常用用一个function来获得，由两个数据：不同类型的值 Action 需要指明不同的类型 以及 这个类型的值  知道了怎么修改 ，也有需要有人来执行这个操作，这个人就是Reducer根据和action约定的不同的规则来做不同的修改
 已经知道了怎么做，那么到底怎么实施的呢？var store = Redux.createStore(favoriteColors);  用reducer作为一个初始化参数才创建仓库，以及有个入口方法来接收action
store.dispatch(addColor(&amp;quot;blue&amp;quot;)); store.dispatch(addColor(&amp;quot;yellow&amp;quot;)); store.dispatch(addColor(&amp;quot;green&amp;quot;)); store.dispatch(addColor(&amp;quot;red&amp;quot;)); 怎么和React建立联系 Redux既然是独立于React的，那么要和React一起使用，必然需要一个&amp;quot;中间件&amp;quot;来沟通，这个&amp;quot;中间件&amp;quot; 就是redux-react 库。
Redux 本身有读取和写入状态库的操作，那么我们也要让React具有相同的能力
 Provider component 提供了让React读取Redux Store的能力
那么Provider 是怎么实现让React各层可以访问redux store 的呢？ 这个全靠React本身的能力Context, Context 提供了一种向整个component tree 传递props的方式，这种方式避免了每层都手动传递 Redux修改Store的能力，是通过dispatch来接收action, 我们也要让React和这个能力做一个捆绑链接，这个需要 Connect Component 来实现  </description>
    </item>
    
  </channel>
</rss>
