<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OSTEP笔记 on 编程 生活 思考</title>
    <link>http://mythou.com/tags/ostep%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in OSTEP笔记 on 编程 生活 思考</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 02 Aug 2019 14:24:00 +0000</lastBuildDate>
    
	<atom:link href="http://mythou.com/tags/ostep%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>基于事件的并发</title>
      <link>http://mythou.com/posts/2019-08-02-event-based-concurrency/</link>
      <pubDate>Fri, 02 Aug 2019 14:24:00 +0000</pubDate>
      
      <guid>http://mythou.com/posts/2019-08-02-event-based-concurrency/</guid>
      <description>基础 之前一直用thread 来写并发的程序，但是在一些其他类型的并发程序也是用基于事件的方式，比如GUI程序以及http server 类的程序。
基于事件的并发主要解决两个问题：
 anaging concurrency correctly in multi-threaded applications can be challenging in a multi-threaded application, the developer has little or no control over what is schedule at a given moment in time  Event-based Concurrency 的简单定义：
 you simply wait for something (i.e., an “event”) to occur; when it does, you check what type of event it is and do the small amount of work it requires (which may include issuing I/O requests, or scheduling other events for future handling, etc.</description>
    </item>
    
    <item>
      <title>Semaphores 信号量</title>
      <link>http://mythou.com/posts/2019-07-26-threads-semaphore/</link>
      <pubDate>Fri, 26 Jul 2019 18:24:00 +0000</pubDate>
      
      <guid>http://mythou.com/posts/2019-07-26-threads-semaphore/</guid>
      <description>Dijkstra 和他的同事研究完 lock 和 condition variable 发明了信号量 semaphore。 哪哪都能看到大佬的名字。
信号量能以单个机制解决所有相关的多线程同步问题，可以把信号量当作locks 和 condition variable 使用。
 信号量的定义: A semaphore is an object with an integer value that we can manipulate
with two routines; in the POSIX standard, these routines are sem wait()
and sem post()
 #include &amp;lt;semaphore.hsem_t s; sem_init(&amp;amp;s, 0, 1); //第二个参数 0 表示只在单个进程的线程间共享信号量 1 多个进程中间的线程共享信号量 //第三个参数 1 信号量的int value 初始值 semaphore信号量的用法 用之前先确认三点：
 sem_wait() 如果信号量的值&amp;gt;0 先执行-1操作然后立刻return ; 如果信号量的值&amp;lt;=0 就阻塞调用它的线程 sem_post() 不像wait 操作那样需要特定的条件.</description>
    </item>
    
    <item>
      <title>常见的并发问题</title>
      <link>http://mythou.com/posts/2019-07-26-common-concurrency-bugs/</link>
      <pubDate>Fri, 26 Jul 2019 18:24:00 +0000</pubDate>
      
      <guid>http://mythou.com/posts/2019-07-26-common-concurrency-bugs/</guid>
      <description>有研究者通过研究Mysql,Mozilla,Apache,OpenOffice中的关于并发的问题发现，非死锁问题大概是死锁问题数量的两倍
####非死锁问题 只列举一些常见的问题
1. Atomicity Violation 违反原子性 Thread 1:: if (thd-&amp;gt;proc_info) { fputs(thd-&amp;gt;proc_info, ...); } Thread 2:: thd-&amp;gt;proc_info = NULL; 比如当线程1检查完proc_info 的值之后打算往里面写操作的时候，系统中断了线程1，线程2操作proc_info被置NULL;这个过程就违法了原子性操作。
解决方法就是加个pthread_mutex_t锁
2. Order-Violation Bugs 顺序冲突 Thread 1:: void init() { mThread = PR_CreateThread(mMain, ...); } 6 Thread 2:: void mMain(...) { mState = mThread-&amp;gt;State; } 这个就更好理解了，thread2 以为 thread1 已经创建好了线程mThread ，但是有可能没创建好，所以需要condition variable 约束一下
死锁问题 死锁发生的主要原因：
 Mutual exclusion 很难不用mutual exclusion, 或许可以在硬件上找到替代方案 Hold-and-wait fix : 让某个线程一次性获得所有锁 No preemption
fix:设计优先级 Circular wait</description>
    </item>
    
    <item>
      <title>Condition Variable 条件变量</title>
      <link>http://mythou.com/posts/2019-07-26-condition-variable/</link>
      <pubDate>Fri, 26 Jul 2019 14:24:00 +0000</pubDate>
      
      <guid>http://mythou.com/posts/2019-07-26-condition-variable/</guid>
      <description>Condition Variables 的主要概念 A condition variable is an explicit queue that threads can put themselves on when some state of execution is not as desired; some other thread, when it changes said state, can then wake one (or more) of those waiting threads and thus allow them to continue (by signaling on the condition). Condition Variable 的两个主要操作
 pthread_cond_wait() 这个操作会自动释放mutex锁，如果cv条件不满足就block自己 pthread_cond_signal() 唤醒等待某个cv的线程  Condition Variables的应用 场景一：Parent Waiting For Child 父线程等待子线程 最容一想到的办法使用一个共享变量shard variable</description>
    </item>
    
    <item>
      <title>Locks锁</title>
      <link>http://mythou.com/posts/2019-07-11-locks/</link>
      <pubDate>Thu, 11 Jul 2019 14:24:00 +0000</pubDate>
      
      <guid>http://mythou.com/posts/2019-07-11-locks/</guid>
      <description>Locks provide some minimal amount of control over scheduling to programmers.
 线程是程序员创建的，但是由OS安排执行的，怎么执行是OS说了算的，所以这回导致一些超出程序员预想的混乱。 而lock可以帮助程序员减少这些混乱 ，让程序稍微有一点可控制性。线程用的锁的名字是mutex, 它在线程之间提供了一种互斥锁
如果自己创建一个锁 创建一个锁可以很好理解锁是如何工作的。要想组建一个锁（需要OS和硬件支持），1.要想明白这个锁是干什么的（例子用互斥锁 mutual exclusion）,2.正确,，3.是公平，4.是性能
先设定一个最简单的锁的情况：
![image-20190712102200391]({{ site.url }}/assets/img/image-20190712102200391.png)
假设CPU是单核的，一个进程在执行关键代码的时候不会被中断，就好像是获得了锁一样。
好处就是非常简单，坏处就比较多：
 有的线程霸占CPU不释放锁 在多核CPU没用 关闭中断，中断就丢失了，比如硬盘完成了一个读操作，CPU就不知道去唤醒等待读操作的线程 没效率  为了在多核情况下有用，改进一下我们的锁，用一个全局的标志flag ，多核都能访问
![image-20190712103103446]({{ site.url }}/assets/img/image-20190712103103446.png)
我们可以看到lock 函数里面有个test-and-set 操作，这个操作实际上是CPU自带的一个指令。
这个锁有两个问题：一个是正确性 另一个是性能问题
当两个线程同时看到flag=0的时候他们就同时把flag设置成1 以为自己获得了锁，性能问题和之前一样，一个线程获得锁，其他线程就干等，占着CPU资源干等
要解决正确性问题我们就求助硬件了，就要用到CPU的另一个指令就是xchg (x86), 它是一个原子性的test-and-set 操作，不允许两个线程同时执行，用C语言描述一下这个操作
![image-20190712104215636]({{ site.url }}/assets/img/image-20190712104215636.png)
我们记住CPU里面它就是原子性操作，我们的锁就变成了下面的样子
![image-20190712104329019]({{ site.url }}/assets/img/image-20190712104329019.png)
我们评估一下现在的锁，实现了目的互斥锁以及要求的正确，但是还是没解决公平和性能
没有获得锁的线程一直处于test-and-set 操作循环中，所以这种锁也叫spin lock 自旋锁。既然满足了正确性，但是总是要个先后嘛，这个锁要想在单核CPU上正确工作需要抢先调度策略preemptive scheduler
CPU还有一个指令是compare-and-swap
![image-20190712104941718]({{ site.url }}/assets/img/image-20190712104941718.png)
用这个指令来实现锁其实和test-and-set 差别不大
![image-20190712105014816]({{ site.url }}/assets/img/image-20190712105014816.</description>
    </item>
    
    <item>
      <title>线程概述</title>
      <link>http://mythou.com/posts/2019-07-06-thread/</link>
      <pubDate>Sat, 06 Jul 2019 11:24:00 +0000</pubDate>
      
      <guid>http://mythou.com/posts/2019-07-06-thread/</guid>
      <description>为什么使用线程  并行parallelism的需要 避免程序因为低速的IO操作阻塞 尽管可以用多进程解决一些问题，但是线程可以共享一个内存地址空间，当需要贡献数据的时候线程的选择更自然  线程的问题  共享数据比较难操作 不可控制的执行计划 线程等待其他线程  线程Thread API 1.Thread Creation #include &amp;lt;pthread.h&amp;gt; int pthread_create( pthread_t * thread, const pthread_attr_t * attr, void * (*start_routine)(void*), void * arg); 第一个参数 thread 是结构类型pthread_t 的指针，我们用它来和thread交互，所以需要把它传给pthread_create()来初始化它
第二个参数是是设置线程的属性
第三个线程要执行的function
第四个是第三个参数function的参数
代码
#include &amp;lt;pthread.h&amp;gt; 2typedef struct __myarg_t { int a; int b; } myarg_t; void *mythread(void *arg) { myarg_t *m = (myarg_t *) arg; printf(&amp;#34;%d %d\n&amp;#34;, m-&amp;gt;a, m-&amp;gt;b); return NULL; } int main(int argc, char *argv[]) { pthread_t p; int rc; myarg_t args; args.</description>
    </item>
    
  </channel>
</rss>