<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vue on 薛定谔的肥宅</title>
    <link>https://mythou.com/tags/vue/</link>
    <description>Recent content in Vue on 薛定谔的肥宅</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Dec 2019 14:24:00 +0000</lastBuildDate><atom:link href="https://mythou.com/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue核心组件Vuex</title>
      <link>https://mythou.com/posts/2019-12-16-vue-vuex/</link>
      <pubDate>Mon, 16 Dec 2019 14:24:00 +0000</pubDate>
      
      <guid>https://mythou.com/posts/2019-12-16-vue-vuex/</guid>
      <description>Vuex是类似redux 的一个概念，是一个专为 Vue.js 应用程序开发的状态管理模式. Vuex的核心概念包含 State,Getters,Mutations,Actions,Modules
State 保存一个单一的状态树
Getters 类似OOP中的魔法getter方法，可以访问一些State中没有的key ,或者覆盖一些Key的获取的方式； Getter 接受 state 作为其第一个参数
const store = new Vuex.Store({ state: { todos: [ { id: 1, text: &amp;#39;...&amp;#39;, done: true }, { id: 2, text: &amp;#39;...&amp;#39;, done: false } ] }, getters: { doneTodos: state =&amp;gt; { return state.todos.filter(todo =&amp;gt; todo.done) }, getTodoById: (state) =&amp;gt; (id) =&amp;gt; { return state.todos.find(todo =&amp;gt; todo.id === id) } } }) //访问方式 却和传统OOP不一样，必须显式声明getter store.</description>
    </item>
    
  </channel>
</rss>
