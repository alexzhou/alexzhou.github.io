<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>互斥锁 on My New Hugo Site</title>
    <link>http://example.org/tags/%E4%BA%92%E6%96%A5%E9%94%81/</link>
    <description>Recent content in 互斥锁 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Jul 2019 14:24:00 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/%E4%BA%92%E6%96%A5%E9%94%81/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Locks锁</title>
      <link>http://example.org/posts/2019-07-11-locks/</link>
      <pubDate>Thu, 11 Jul 2019 14:24:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2019-07-11-locks/</guid>
      <description>Locks provide some minimal amount of control over scheduling to programmers.
 线程是程序员创建的，但是由OS安排执行的，怎么执行是OS说了算的，所以这回导致一些超出程序员预想的混乱。 而lock可以帮助程序员减少这些混乱 ，让程序稍微有一点可控制性。线程用的锁的名字是mutex, 它在线程之间提供了一种互斥锁
如果自己创建一个锁 创建一个锁可以很好理解锁是如何工作的。要想组建一个锁（需要OS和硬件支持），1.要想明白这个锁是干什么的（例子用互斥锁 mutual exclusion）,2.正确,，3.是公平，4.是性能
先设定一个最简单的锁的情况：
![image-20190712102200391]({{ site.url }}/assets/img/image-20190712102200391.png)
假设CPU是单核的，一个进程在执行关键代码的时候不会被中断，就好像是获得了锁一样。
好处就是非常简单，坏处就比较多：
 有的线程霸占CPU不释放锁 在多核CPU没用 关闭中断，中断就丢失了，比如硬盘完成了一个读操作，CPU就不知道去唤醒等待读操作的线程 没效率  为了在多核情况下有用，改进一下我们的锁，用一个全局的标志flag ，多核都能访问
![image-20190712103103446]({{ site.url }}/assets/img/image-20190712103103446.png)
我们可以看到lock 函数里面有个test-and-set 操作，这个操作实际上是CPU自带的一个指令。
这个锁有两个问题：一个是正确性 另一个是性能问题
当两个线程同时看到flag=0的时候他们就同时把flag设置成1 以为自己获得了锁，性能问题和之前一样，一个线程获得锁，其他线程就干等，占着CPU资源干等
要解决正确性问题我们就求助硬件了，就要用到CPU的另一个指令就是xchg (x86), 它是一个原子性的test-and-set 操作，不允许两个线程同时执行，用C语言描述一下这个操作
![image-20190712104215636]({{ site.url }}/assets/img/image-20190712104215636.png)
我们记住CPU里面它就是原子性操作，我们的锁就变成了下面的样子
![image-20190712104329019]({{ site.url }}/assets/img/image-20190712104329019.png)
我们评估一下现在的锁，实现了目的互斥锁以及要求的正确，但是还是没解决公平和性能
没有获得锁的线程一直处于test-and-set 操作循环中，所以这种锁也叫spin lock 自旋锁。既然满足了正确性，但是总是要个先后嘛，这个锁要想在单核CPU上正确工作需要抢先调度策略preemptive scheduler
CPU还有一个指令是compare-and-swap
![image-20190712104941718]({{ site.url }}/assets/img/image-20190712104941718.png)
用这个指令来实现锁其实和test-and-set 差别不大
![image-20190712105014816]({{ site.url }}/assets/img/image-20190712105014816.</description>
    </item>
    
  </channel>
</rss>